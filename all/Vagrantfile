# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"
  config.vm.hostname = "master"

  config.vm.provider "virtualbox" do |v|
    v.memory = 2048
	v.cpus = 2
  end
  
  # config.vm.box_url = "http://files.vagrantup.com/precise32.box"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 8080, host: 8081, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 8880, host: 8881, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  
  config.vm.network "private_network", ip: "192.168.33.11"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  
  config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", privileged:false, inline: <<-SHELL 
    echo "Provisioning"
    echo "Running shell as:" `whoami`
    
    # ===== Update source list =====
	#sudo rm /etc/apt/sources.list
    echo 'deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ trusty main' | sudo tee /etc/apt/sources.list
    echo 'deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ trusty main' | sudo tee -a /etc/apt/sources.list
    echo 'deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ trusty universe' | sudo tee -a /etc/apt/sources.list
    echo 'deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ trusty universe' | sudo tee -a /etc/apt/sources.list
    echo 'deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ trusty restricted' | sudo tee -a /etc/apt/sources.list
    echo 'deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ trusty restricted' | sudo tee -a /etc/apt/sources.list
    echo 'deb http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ trusty multiverse' | sudo tee -a /etc/apt/sources.list
    echo 'deb-src http://ftp.cuhk.edu.hk/pub/Linux/ubuntu/ trusty multiverse' | sudo tee -a /etc/apt/sources.list

    sudo apt-get -y update
	sudo apt-get -y install python-pip
	sudo apt-get -y install python-dev
	sudo apt-get -y install python-numpy
	sudo apt-get -y install python-scipy
	sudo apt-get -y install python-matplotlib
	sudo apt-get -y install python-pandas
	sudo apt-get -y install libzmq-dev

	sudo pip install --upgrade pip

	cat << EOF > requirements.txt
pyzmq
jinja2
jsonschema
functools32
tornado
ipython
networkx
EOF

	sudo pip install -r requirements.txt

	sudo pip install --upgrade --no-cache-dir https://get.dato.com/GraphLab-Create/1.4.1/e-hkosc15@hupili.net/64CA-557D-92A5-F7D8-91A9-CC38-C9C3-BBB9/GraphLab-Create-License.tar.gz

    # ===== Clone the repo to get all related resources =====
    sudo apt-get install -y git
    git clone git://github.com/initiummedia/hkosc2015-workshop.git

    # ===== Insecure key will be substituted by Vagrant upon provisioning =====
	echo "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key" >> ~/.ssh/authorized_keys

  SHELL
end
